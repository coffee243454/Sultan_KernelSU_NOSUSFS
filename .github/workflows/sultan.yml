name: Sultan
permissions:
  contents: write  # Allow writing to repository contents (for pushing tags)
  actions: write   # Allows triggering actions

on:
  workflow_call: # This allows this workflow to be called from another workflow
    inputs:
      codename:
        required: true
        type: string
      repo:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
  
jobs:
  build-kernel-sultan-kernelsu-next:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize Build Space
        uses: AdityaGarg8/remove-unwanted-software@v5
        with:
          remove-dotnet: 'true'          # Frees ~2 GB
          remove-android: 'true'         # Frees ~9 GB
          remove-haskell: 'true'         # Frees ~5.2 GB
          remove-codeql: 'true'          # Frees ~5.4 GB
          remove-docker-images: 'true'   # Frees ~3.2 GB
          remove-large-packages: 'true'  # Frees ~3.1 GB
          remove-swapfile: 'true'        # Frees ~4 GB
          remove-cached-tools: 'false'   # Avoid unless confirmed safe
          verbose: 'true'                # Enable detailed logging
          
      - name: Installing dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: Set CONFIG Environment Variable
        run: |
          CONFIG="${{ inputs.repo }}"
          
          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          
          echo "CONFIG set to: $CONFIG"

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="sultan-${{ inputs.codename }}"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"

          # Debug print the branches
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"

          # Clone repositories using the branch names
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          #cd susfs4ksu
          #git checkout b5c3ada461a61c6ad033693b7a00494ead3a28fd
          #cd ..
          git clone https://github.com/TheWildJames/kernel_patches.git
          git clone https://github.com/kerneltoast/${{ inputs.repo }}
      
      - name: Add KernelSU
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next

      - name: Apply KSU Hooks
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          # Apply additional patch
          cp ../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch

      - name: Add KSU Configuration Settings
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Adding configuration settings to ${{ inputs.codename }}_defconfig..."

          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig

      - name: Run sed and perl Commands
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Running sed commands..."
          sed -i 's/CONFIG_LOCALVERSION="-Sultan"/CONFIG_LOCALVERSION="-SKSUNext"/' ./arch/arm64/configs/${{ inputs.codename }}_defconfig
          echo "CONFIG_LOCALVERSION_AUTO=n" >> ./arch/arm64/configs/${{ inputs.codename }}_defconfig
        
      - name: Build the Kernel
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building the kernel..."
          if [ "${{ inputs.codename }}" == "zumapro" ]; then
            export KCFLAGS="-march=armv8.6-a -O3 --param=min-pagesize=0"
          fi
          make ${{ inputs.codename }}_defconfig -j$(nproc --all)
          make -j$(nproc --all)

      - name: Copy Images
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"

          echo "Copying Image.lz4 and concatenating DTB files..."
          cp ./out/arch/arm64/boot/Image.lz4 ../AnyKernel3/Image.lz4
          if [ "${{ inputs.codename }}" == "gs201" ]; then
            cat ./out/google-devices/gs201/dts/*.dtb > ../AnyKernel3/dtb
            #cp ./out/google-devices/gs201/dts/dtbo.img ../AnyKernel3/dtbo.img
          elif [ "${{ inputs.codename }}" == "zuma" ]; then
            cat ./out/google-devices/zuma/dts/*.dtb > ../AnyKernel3/dtb
          elif [ "${{ inputs.codename }}" == "zumapro" ]; then
            cat ./out/google-devices/zumapro/dts/*.dtb > ../AnyKernel3/dtb
          fi

      - name: Create ZIP Files for Different Formats
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3

          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.codename }}_A15_Sultan_Next.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ inputs.codename }}
          path: |
            *.zip
